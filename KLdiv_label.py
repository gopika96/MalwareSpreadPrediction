import csv

import numpy as np
import sys
import numpy as np
from sklearn import metrics

#-------------------KL Divergence funcion----------------
def KL(a, b):
    a = np.asarray(a, dtype=np.float)
    b = np.asarray(b, dtype=np.float)

    return np.sum(np.where(a != 0, a * np.log(a / b), 0))
    
    
#--------------------Topic Distribution values (50 topics) for malware labeled articles---------------
    
aek=[0.000576236026276, 0.000573065902579, 0.000343839541547, 0.000558222619181, 0.0547987577793,
0.000572409845449, 0.000763442032937, 0.000560978346236, 0.000351493848858, 0.000344234079174,
0.000574910888812, 0.00035141150287, 0.000569151963574, 0.000576501787156, 0.000561482313307,
0.000117219552221, 0.000346540371953, 0.000347664851084, 0.00034920265394, 0.000544721647238, 0.00055450815127, 0.000351082504389, 0.000350426352062, 0.000538618980933, 0.00055475424387, 0.000348553502963, 0.000777518604909, 0.000768639508071, 0.000555493834018, 0.000555987990659, 0.000343760742523, 0.000348229831689, 0.000574118727753, 0.000577034045009, 0.000551815472906, 0.00034839159215, 0.000348634514817, 0.000347342827371, 0.000346620450607, 0.00034133576061, 0.00055884654074, 0.000343524562006, 0.000569411228789, 0.000565163332203, 0.000557973440464, 0.000768133435751, 0.000554877372101, 0.000570450656018, 0.000555987990659, 0.000564652738566]
altesla=[0.000693641618497, 0.00108956199608, 0.00110253583241, 0.00112536574387, 0.000231749710313, 0.00068073519401, 0.00149349263921, 0.000694283730618, 0.00107921433197, 0.000685714285714, 0.000684462696783, 0.0006647462885, 0.00068760027504, 0.00102228583112, 0.000693962526024, 0.00106997646052, 0.00111781801923, 0.000231749710313, 0.00158694173657, 0.00109337415264, 0.000691403549205, 0.000694605232693, 0.000670091579182, 0.000685714285714, 0.00110840168477, 0.00150959672202, 0.000693641618497, 0.00150311359244, 0.00109817702614, 0.00109146474569, 0.000686027898468, 0.00114390299703, 0.0678770091799, 0.000692680674209, 0.000694283730618, 0.00147960262101, 0.00110643947776, 0.00110302228105, 0.00108577633008, 0.000679809653297, 0.0006801178871, 0.000694927032662, 0.00110546097723, 0.000693321007627, 0.000678579506899, 0.00068135362253, 0.000690448791715, 0.000688547165481, 0.000668002672011, 0.000683526999316]  
cerber=[0.000141342756184, 0.000101557898158, 0.000101155192296, 0.000100464144347, 0.000179315016636, 0.000101810185091, 0.000101976300708, 0.000101752172409, 0.000101615689462, 0.000101061141991, 0.00013852882389, 6.21568424324e-05, 0.000102988733033, 0.000101052971968, 0.000140221550049, 0.00010140136689, 0.00010138491798, 0.000101694225802, 6.23817346281e-05, 0.000102414944389, 0.000101458980134, 0.00014099542772, 0.000141542816702, 0.000100832879585, 0.000101061141991, 0.000100274752823, 0.000101085659988, 9.94253216409e-05, 0.000100508573381, 0.000101315069603, 0.000101752172409, 0.000101806039134, 0.00010059350166, 0.000101310963873, 9.99260547195e-05, 0.000103141696062, 0.000101913943866, 0.000100274752823, 0.000101032552688, 0.000101073399503, 0.00010114700706, 0.000101052971968, 0.000100282797489, 0.0525548335105, 0.000101789458684, 0.000138457582531, 0.000101319175667, 0.000101685953102, 0.000139223134907, 0.000100694794079] 
cryptolocker=[0.000669523299411, 0.000664363539729, 0.000418526785714, 0.000693096756307, 0.000404639870515, 0.000681756203981, 0.000422535211268, 0.000413678985108, 0.000411635565313, 0.00068306010929, 0.000420168067227, 0.000689084895259, 0.00093085106383, 0.000937583712832, 0.000422178440754, 0.000417710944027, 0.000403009134874, 0.000412881915772, 0.000415742793792, 0.000417594654788, 0.0564417386572, 0.00068082788671, 0.000667913438418, 0.000140924464487, 0.000677874186551, 0.000681570338059, 0.0011535503717, 0.000690226394257, 0.000421585160202, 0.000653594771242, 0.000678978815861, 0.000687001923605, 0.00065893516078, 0.000672043010753, 0.000421348314607, 0.00118389897395, 0.000409053722389, 0.000410509031199, 0.000694637399278, 0.000411974732216, 0.000418760469012, 0.00067494600432, 0.000684556407448, 0.000663129973475, 0.000680457267284, 0.000422416220783, 0.000422654268808, 0.000421585160202, 0.000932338838572, 0.000140924464487]
duqu=[0.000272242186649, 0.000268096514745, 0.000273612783189, 0.000274755467634, 0.000274755467634, 0.000278210549744, 0.000279392042915, 0.000273224043716, 0.000272538973073, 0.00027911130959, 0.000274574409665, 0.000272182906913, 0.000272538973073, 0.000170010200612, 0.000171018127922, 0.000277100421193, 0.000271002710027, 0.00027557319224, 0.000279142474319, 0.000169683257919, 0.000279516994633, 0.000168747890651, 0.000280426247897, 0.000277623542476, 0.000273852557783, 0.000277469478357, 0.0563837068636, 0.000275269764369, 0.000169223826715, 0.000273015179644, 0.000282453960005, 0.000274273176083, 0.000170454545455, 0.000278613618634, 0.000273882559159, 0.000279142474319, 0.000276824271952, 0.000383267630311, 0.000377277137005, 0.000272568687309, 0.000279204824659, 0.000171037628278, 0.000267780634105, 0.00017094017094, 0.000272153276725, 0.000170998632011, 0.000168255748738, 0.000383183709218, 0.000274393590166, 0.000274062705547] 
locky=[0.000100605645989, 0.000102352050112, 0.000100138190703, 0.000101661143078, 0.000100310963988, 0.000101389029707, 0.000141422712488, 0.0525048699103, 9.95440880766e-05, 0.00014045789273, 0.000140373393226, 0.000100294866909, 0.000102022077578, 0.000101690089284, 0.000101397254162, 0.000101372584798, 0.00010238558411, 6.18697024067e-05, 0.000139333983559, 0.000102063728592, 0.000100423788387, 0.000101955506617, 9.98342751033e-05, 0.000100302914803, 0.000101208428638, 0.000101389029707, 0.000100918357049, 0.000101438396462, 0.000101114279359, 0.000100877635428, 0.000103060908997, 0.000141990709751, 0.000101052971968, 0.000100343173654, 0.00010257041459, 0.000101310963873, 0.000101772883633, 0.000101529027149, 0.000101972141211, 0.000101008060443, 6.16155599827e-05, 0.000101265822785, 0.000140114894213, 0.000179122300726, 0.000101884870097, 0.000101249417816, 0.000101876566352, 0.00010005803366, 0.000102022077578, 0.000101126549764] 
mirai=[7.2569993759e-05, 7.29596824795e-05, 7.3478625068e-05, 7.36387870219e-05, 7.24963389349e-05, 7.4079561449e-05, 7.34268301637e-05, 0.000102963889093, 0.0554758005134, 0.00010133912414, 7.38127223608e-05, 7.3252560177e-05, 0.000103484469938, 0.000102271897144, 7.3478625068e-05, 0.000102349655667, 7.34807847748e-05, 7.35023888276e-05, 7.31817982231e-05, 7.43616056158e-05, 7.33363645697e-05, 7.29383962305e-05, 7.29171223987e-05, 7.28406392495e-05, 7.31539598238e-05, 7.32869182851e-05, 4.45242583001e-05, 7.44368849652e-05, 7.31496788729e-05, 7.28236647781e-05, 7.38127223608e-05, 7.30791154504e-05, 7.34268301637e-05, 0.000102870075095, 0.000101950160936, 7.37104359235e-05, 0.000103499770822, 0.000102161444271, 7.20616848022e-05, 7.34635106742e-05, 7.22512029825e-05, 7.3899998522e-05, 7.2914995698e-05, 7.27727887988e-05, 7.34397720429e-05, 0.000102460516108, 4.50294943188e-05, 7.33449707354e-05, 0.000100749866866, 7.38236206056e-05]
nek=[0.000780437044745, 0.000780437044745, 0.000266382525306, 0.00128270908158, 0.00173353145121, 0.00184404636459, 0.000770811921891, 0.00124626121635, 0.00126710593006, 0.0603998889197, 0.00127226463104, 0.00128600823045, 0.00123274161736, 0.000791556728232, 0.00124564025909, 0.000798722044728, 0.00127226463104, 0.0012987012987, 0.000793650793651, 0.000773195876289, 0.00127877237852, 0.000785340314136, 0.00125691302162, 0.000772399588054, 0.000797872340426, 0.00127942681679, 0.000788229111929, 0.00123885034688, 0.000789889415482, 0.000792393026941, 0.000764136525726, 0.00128600823045, 0.00176056338028, 0.00121124031008, 0.000792811839323, 0.000789889415482, 0.000786163522013, 0.00129466597618, 0.000796601168348, 0.00127942681679, 0.000776799585707, 0.00125439036628, 0.00124254473161, 0.000795334040297, 0.00130548302872, 0.000783699059561, 0.000782064650678, 0.000773195876289, 0.000793231094659, 0.00129399585921]

petya=[0.00014228124259, 0.000236484888616, 0.000142918393597, 0.000142918393597, 0.000322684737012, 0.000231192490868, 0.00023254732338, 0.000317705260291, 0.000230107229969, 0.000227014755959, 0.000231986266413, 0.000321587724537, 0.000234752805296, 0.000230914884773, 0.000142633005277, 0.000232115500673, 0.00022920009168, 0.000317647592685, 0.0604867702632, 0.000229053094507, 0.000141850678519, 0.000225336878634, 0.000230255583698, 0.000233241591641, 0.000234203007167, 0.000314423033733, 0.000225641951352, 0.000225580870742, 0.000231900190158, 0.000139062717285, 0.000231878681074, 0.000226664853348, 0.000230107229969, 0.000231878681074, 0.000142200312841, 0.000141209696399, 0.000234181068802, 0.000317043344354, 0.000231577972303, 0.000229179080534, 0.000230489097866, 0.000318688823128, 0.00023464263926, 0.000233874362692, 0.000232158610763, 0.000229074082558, 0.000316470003165, 0.000229874488529, 0.000231921703233, 0.000229642217425]
redoctober=[0.000249925022493, 0.000357142857143, 0.000249775202318, 0.000250450811461, 0.000154990700558, 0.000248558361503, 0.000252601798525, 0.00025, 0.000249800159872, 0.000248681985477, 0.000254090862893, 0.000252066948982, 0.000250777409971, 0.00024806509228, 0.0002457002457, 0.000246208390782, 0.000254919955134, 0.00025135732958, 0.000252244980325, 0.000254142523127, 0.0003465003465, 0.000245074012352, 0.000250626566416, 0.000153846153846, 0.000255362614913, 0.000251762336354, 0.000253755582623, 0.000246378239874, 0.000250802568218, 0.0584681193281, 0.000252806148246, 0.0001514998485, 0.00015479876161, 0.000255963960274, 0.0002523977789, 0.000155585520174, 0.000154051555921, 0.0002523977789, 0.000253704079562, 0.00024927709642, 0.000151975683891, 0.000244642332909, 0.000249053596334, 0.000253267146186, 0.000248484246099, 0.000252780586451, 0.000256489176157, 0.000253987605405, 0.000151530457622, 0.000247647350173]

sony=[0.000235396980193, 0.000169773522121, 0.000169164664885, 0.000170212765957, 0.000173196161973, 0.000171438367907, 0.000235428648303, 0.000171039578558, 0.000171791788353, 0.000171180115718, 0.000105414807267, 0.000172407848005, 0.000170934327032, 0.000168118086144, 0.000172134815988, 0.000167509799323, 0.000171367858245, 0.00023027073259, 0.000172848895496, 0.000104994225318, 0.0584173833097, 0.000170305528117, 0.000172170379808, 0.000172503018803, 0.000172099266857, 0.000173232165749, 0.000171461884023, 0.00016895887541, 0.000170340339999, 0.000236526440277, 0.000173268184496, 0.000235666431, 0.000174052285307, 0.000310355529501, 0.000169888892664, 0.000169911985591, 0.000168594261051, 3.52422907489e-05, 0.000170642640183, 0.000171062985391, 0.000173424438972, 0.000172992422932, 0.000170027544462, 0.000104591569919, 0.000238981257041, 0.000170770859661, 0.000235017626322, 0.000170864231282, 0.000171673819742, 0.00017318416404]
stuxnet=[0.000113708723733, 0.000114379832548, 0.0557901516673, 0.000112922896246, 0.000112805703456, 0.000114594792813, 0.000116909839132, 0.000115111888756, 0.000115095990056, 0.000158593502198, 0.000116571854891, 0.000114636830521, 0.000113168258567, 0.00011514900281, 0.000114155251142, 0.000157006998026, 0.000111941969283, 0.000159686102747, 0.000114542289013, 0.000158579130986, 0.000116084695394, 0.0001152498617, 0.000111967036904, 0.000159576893266, 0.000113999088007, 0.000115334932644, 0.000159213938043, 0.000112836252031, 0.000159525979945, 0.000115468107709, 0.000115186140804, 0.000116474096161, 0.000114910829197, 0.00011406670621, 0.000115612282649, 0.000115138396352, 0.000116084695394, 0.000114847482543, 0.000114369367309, 0.000115043026092, 0.000157176216993, 0.000113214382755, 0.000114009485589, 0.000157757144145, 0.000114134404675, 0.000114458382932, 0.000116430700447, 0.000112546706883, 0.000115303016327, 0.000115955473098]

trickbot=[0.000162850535778, 0.000162206001622, 0.000160797555877, 0.000165120042271, 0.000164565711088, 0.000157049973302, 0.000100056698796, 0.000163564395302, 0.000163886066407, 0.000161493491812, 0.000228198859006, 0.000163521601204, 0.000224683036431, 0.000161817534548, 0.000163886066407, 0.000164815242114, 0.000162342933212, 0.000165436918903, 0.000162670397241, 0.000164262952134, 0.000162543480381, 0.000161451774355, 0.000162882366355, 9.96512207275e-05, 0.000163628628465, 0.000161535230834, 0.000223435155926, 0.000161503924545, 0.000162342933212, 0.000161077284881, 0.00016016913861, 0.000161139579103, 0.000163201357835, 0.000161556108436, 0.000162712746917, 9.90262419541e-05, 0.000166151596717, 0.000164522391497, 0.000164058142206, 0.0517325013015, 0.000162090316724, 0.000163233325716, 0.000163094888606, 0.000159821000479, 0.000163158753467, 0.000164414192233, 0.000164370952365, 0.000164706657443, 0.000161660577452, 0.000223949835237]
wannacry=[4.1587304227765349e-05, 5.7620282339383461e-05, 4.1124170319863798e-05, 4.1044500447385052e-05, 5.7409518498166994e-05, 4.2007981516488134e-05, 4.1590071618103327e-05, 4.0904814496666259e-05, 4.0904814496666259e-05, 4.1754002121103308e-05, 5.7546386497973546e-05, 5.7636413039003385e-05, 4.154859939671434e-05, 4.1523066063198107e-05, 4.1434289360503179e-05, 4.1182429928095477e-05, 4.1166832706225247e-05, 4.0947693416429852e-05, 4.1379424494964121e-05, 4.1358887611358802e-05, 4.1858868638498436e-05, 5.7502895681532536e-05, 0.022989552383233233, 4.125446579592241e-05, 4.1627467468134175e-05, 5.7532197483377305e-05, 4.1304904544365601e-05, 4.1378739603591678e-05, 5.7372816759419387e-05, 4.1249020335767024e-05, 4.1396554150832482e-05, 5.758331071131841e-05, 5.7741959432149073e-05, 4.1112673392700036e-05, 4.1346575263170955e-05, 4.1603914096238177e-05, 5.7717202199849939e-05, 4.1355466779153537e-05, 5.789861126045277e-05, 4.1404781424158865e-05, 4.1417814630428842e-05, 4.1104561784266816e-05, 4.1361624684617611e-05, 4.1660070488839264e-05, 4.1281033016570204e-05, 5.7413285434249486e-05, 5.7782950727652444e-05, 5.7323015190599023e-05, 5.7785812757456433e-05, 4.1204829205982944e-05]

zeus=[0.000104975855553, 0.000171244605795, 0.000169422607753, 0.000169790817713, 0.000167740203972, 0.000169399647649, 0.000168282175552, 0.000173731758165, 0.000170543693294, 0.000171844927138, 0.000170091168867, 0.000168554476807, 0.000170986936598, 0.000104558762024, 0.000168225556827, 0.000169883120413, 0.000168884685537, 0.000171022027637, 0.000170532060027, 0.000167582785896, 0.000234192037471, 0.00016818028927, 0.000170450671576, 0.000167246454375, 0.000168543113328, 0.000103662750518, 0.000171726885561, 0.000171232876712, 0.00016938816993, 0.000231849496555, 0.000172711571675, 0.0572618937447, 0.000171444246331, 0.000237513572204, 0.000169710135089, 0.000169021702387, 0.000167470525188, 0.000170068027211, 0.000167773974901, 0.000168146354587, 0.000170683416399, 0.000170881749829, 0.000169399647649, 0.000172890733057, 0.000172711571675, 0.000104997900042, 0.00016886187099, 0.000173262180331, 0.000104435006614, 0.00023516764093]

#----------------------malware labels-------------------
# ------[aek =1, altesl=2, cerber=3, cryptolocker=4, duqu=5, locky=6, mirai=7, nek=8, petya=9, redoctober=10, sony=11, stuxnet=12, trickbot=13, wannacry=14 ,zeus=15 ]


#------------------------------Malware list-----------------------
mal=[aek, altesla, cerber, cryptolocker, duqu, locky, mirai, nek, petya, redoctober, sony, stuxnet, trickbot, wannacry, zeus]   

#-----Reading CSV-----------
fi= open("labeled.csv", "wb")
wr = csv.writer(fi)
with open("unlabeled.csv", "r") as f:
	reader = csv.reader(f)
	
	#-----------------------Applying LDA for 50 topics on each article---------------
	for row in reader:
		
		
		corpus = row[1].lower()
		dic = {}    
		arr=[]
		arrv=[]
		for item in corpus.split():
			if len(item)>4:
				  
     				if item in dic:
         				dic[item] += 1  
				else:  
					dic[item] = 1  

		arr = dic.keys()
		arrv= dic.values()
		arrid=range(0,len(arr))

#Replacing actual words in doc with the word id's
		Imgvv=[]
		for w in corpus.split():
			for i in arrid:
				if w == arr[i]:
					Imgvv.append(i)

		Imgv = [Imgvv] # Array of (array of) words in documents (replaced with id's)
		Vocab = arr #Vocab of unique terms

		I =  len(Imgv) #Image number
		M = 50 # Part number - hardwired (supervised learning)
		V = len(Vocab) #vocabulary

#Dirichlet constants
		alpha=0.5
		beta=0.5

#Initialise the 4 counters used in Gibbs sampling
		Na = np.zeros((I, M)) + alpha     
# number of words for each document,.
		Nb = np.zeros(I) + M*alpha        # number of words in each image
		Nc = np.zeros((M, V)) + beta      
		Nd = np.zeros(M) + V*beta         # number of words in each topic

		m_w = [] #topic of the current word
		m_i_w=[] # topic of the image of the word 
#Filling up counters
		for i,img in enumerate(Imgv):
    			for w in img:
				m = np.random.randint(0,M)
				m_w.append(m)
				Na[i,m] += 1
				Nb[i] += 1
				Nc[m,w] += 1
				Nd[m] += 1  
			m_i_w.append(np.array(m_w)) #creating a relationship between topic to word per doc

#Gibbs Sampling
		m_i=[]
		q = np.zeros(M) 
		for t in xrange(500): #Iterations   
			for i,img in enumerate(Imgv): #in the Imgv matrix there are i documents which are arrays (img) filled with words
				m_w = m_i_w[i] #Finding topic of word
				Nab = Na[i] #Taking ith row of the Na counter (array)
				for n, w in enumerate(img): #in img there are n words of value w
					m = m_w[n]  # From the intialised/appended topic-word value we draw the "guessed" topic
					Nab[m] -= 1
					Nb[i] -= 1  
					Nc[m,w] -= 1 #So we move the counter of this positon down one, co
					Nd[m] -= 1 #And then add one back after reloading the topic for the word

					q = (Nab*(Nc[:,w]))/((Nb[i])*(Nd)) # computing topic probability
					q_new = np.random.multinomial(1, q/q.sum()).argmax() # choosing new topic based on this
					m_w[n] = q_new      # assigning word to topic, replacing the guessed topic from init.

					Nab[q_new] += 1 #Putting the counters back to original value before redoing process.
					Nb[i] += 1
					Nc[q_new,w] += 1
					Nd[q_new] += 1

		WordDist = Nc/Nd[:, np.newaxis]  # This gives us the words per topic
		present=[]
		for m in xrange(M): 
			for w in np.argsort(-WordDist[m])[:1]:
			
				present.append(WordDist[m,w])  #LIST WITH 50 TOPIC DISTRIBUTION VALUES    
				
		final=[]
		arr=[]
		k=0
		
                #-----------Iterating through the malware list-----------  
		for value in mal:
			k=k+1 #incrementing the malware label
			check=[]
			check = [KL(value, present), k]
			#------appending the KL div result b/w malware and the article
			arr.append(check)
		word=[]
		#-----Selecting the malware having minimum KL div value with respect to the article
		word=min(arr)
		row.append(str(word[1]))#Printing the results
		wr.writerow(row)












